import { IReferenceable, IParameterized, IReferences, Parameters, Schema, ConfigParams } from 'pip-services3-commons-node';
import { IMessageQueue } from 'pip-services3-messaging-node';
import { MessageEnvelope } from 'pip-services3-messaging-node';
import { ILogger, LogLevel } from 'pip-services3-components-node';
import { ITempBlobsClientV1 } from 'pip-clients-tempblobs-node';
import { IEventLogClientV1 } from 'pip-clients-eventlog-node';
import { ISettingsClientV1 } from 'pip-clients-settings-node';
import { IMappingsClient } from 'pip-clients-mappings-node';
import { TaskStateV1, ProcessStateV1, IProcessStatesClient } from 'pip-clients-processstates-node';
import { IRetriesClientV1 } from 'pip-clients-retries-node';
export declare abstract class Task implements IReferenceable, IParameterized {
    private _references;
    protected _parameters: Parameters;
    protected _logger: ILogger;
    private _counters;
    protected _settingsClient: ISettingsClientV1;
    protected _eventLogClient: IEventLogClientV1;
    protected _processStatesClient: IProcessStatesClient;
    protected _mappingsClient: IMappingsClient;
    protected _tempBlobClient: ITempBlobsClientV1;
    protected _retriesClient: IRetriesClientV1;
    name: string;
    message: MessageEnvelope;
    queue: IMessageQueue;
    processId: string;
    processKey: string;
    processType: string;
    processStage: number;
    processState: ProcessStateV1;
    taskType: string;
    taskState: TaskStateV1;
    statusSection: string;
    correlationId: string;
    constructor();
    initialize(processType: string, taskType: string, message: MessageEnvelope, queue: IMessageQueue, references: IReferences, parameters: Parameters, callback: (err: any) => void): void;
    setReferences(references: IReferences): void;
    setParameters(parameters: Parameters): void;
    abstract execute(callback: (err: any) => void): void;
    private getCorrelationId;
    private getSettingsSection;
    protected toMessageEnvelope(message: any): MessageEnvelope;
    sendMessage(queueName: string, message: any, callback: (err: any) => void): void;
    completeMessage(callback: (err: any) => void): void;
    abandonMessage(callback: (err: any) => void): void;
    moveMessageToDead(callback: (err: any) => void): void;
    logMessage(level: LogLevel, message: string): void;
    logError(ex: Error, message: string): void;
    validateMessage(message: MessageEnvelope, schema: Schema): void;
    private checkCurrentProcess;
    private checkProcessStage;
    private getCurrentTask;
    private toMessage;
    startProcess(processKey: string, callback: (err: any, state: ProcessStateV1) => void): void;
    activateOrStartProcessWithKey(processKey: string, callback: (err: any, state: ProcessStateV1) => void): void;
    activateProcess(processId: string, callback: (err: any, state: ProcessStateV1) => void): void;
    activateProcessWithKey(processKey: string, callback: (err: any, state: ProcessStateV1) => void): void;
    rollbackProcess(errorMessage: string, callback: (err: any) => void): void;
    continueProcess(callback: (err: any) => void): void;
    continueProcessWithRecovery(recoveryQueue: string, recoveryMessage: MessageEnvelope, recoveryTimeout: number, callback: (err: any) => void): void;
    repeatProcessRecovery(recoveryTimeout: number, callback: (err: any) => void): void;
    requestResponseForProcess(request: string, recoveryQueue: string, recoveryMessage: MessageEnvelope, callback: (err: any) => void): void;
    failAndContinueProcess(errorMessage: string, callback: (err: any) => void): void;
    failAndRetryProcess(errorMessage: string, callback: (err: any) => void): void;
    failAndRecoverProcess(errorMessage: string, recoveryQueue: string, recoveryMessage: MessageEnvelope, recoveryTimeout: number, callback: (err: any) => void): void;
    failProcess(errorMessage: string, callback: (err: any) => void): void;
    completeProcess(callback: (err: any) => void): void;
    abortProcess(errorMessage: string, callback: (err: any) => void): void;
    getProcessDataAs<T>(key: string): T;
    setProcessData(key: string, data: any): void;
    readSettings(section: string, callback: (err: any, settings: ConfigParams) => void): void;
    writeSettings(section: string, settings: ConfigParams, callback: (err: any, settings: ConfigParams) => void): void;
    writeSettingsKey(section: string, key: string, value: any, callback: (err: any, settings: ConfigParams) => void): void;
    addMapping(collection: string, internalId: string, externalId: string, timeToLive: number, callback: (err: any) => void): void;
    mapToExternal(collection: string, internalId: string, callback: (err: any, externalId: string) => void): void;
    mapToInternal(collection: string, externalId: string, callback: (err: any, internalId: string) => void): void;
    private getProcessData;
    protected checkErrorType(err: any, errorClass: any): boolean;
}
