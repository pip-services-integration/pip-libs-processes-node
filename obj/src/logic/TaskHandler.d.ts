import { IReferences } from 'pip-services3-commons-node';
import { Parameters } from 'pip-services3-commons-node';
import { CompositeLogger } from 'pip-services3-components-node';
import { CompositeCounters } from 'pip-services3-components-node';
import { IMessageQueue } from 'pip-services3-messaging-node';
import { MessageEnvelope } from 'pip-services3-messaging-node';
import { IEventLogClientV1 } from 'pip-clients-eventlog-node';
import { IRetriesClientV1 } from 'pip-clients-retries-node';
import { ISettingsClientV1 } from 'pip-clients-settings-node';
import { ITaskHandler } from './ITaskHandler';
export declare class TaskHandler implements ITaskHandler {
    maxNumberOfAttempts: number;
    private _cancel;
    private _references;
    private _logger;
    private _counters;
    private _eventLogClient;
    private _settingsClient;
    private _retriesClient;
    name: string;
    queue: IMessageQueue;
    processType: string;
    taskType: string;
    taskClass: any;
    parameters: Parameters;
    disabled: boolean;
    correlationId: string;
    constructor(processType: string, taskType: string, taskClass: any, queue: IMessageQueue, references: IReferences, parameters: Parameters);
    get references(): IReferences;
    get logger(): CompositeLogger;
    get counters(): CompositeCounters;
    get eventLogClient(): IEventLogClientV1;
    get settingsClient(): ISettingsClientV1;
    get retriesClient(): IRetriesClientV1;
    setReferences(references: IReferences): void;
    setParameters(parameters: Parameters): void;
    listen(callback: (err: any) => void): void;
    beginListen(): void;
    private createTask;
    private handlePoisonMessages;
    receiveMessage(message: MessageEnvelope, queue: IMessageQueue, callback: (err: any) => void): void;
    close(correlationId: string, callback: (err: any) => void): void;
}
